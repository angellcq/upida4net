<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Upida.Net-3.5</name>
    </assembly>
    <members>
        <member name="T:Upida.Aspnetmvc.UpidaJsonFormatter">
            <summary>
            Represents JSON formatter above the standard Newtonsoft formatter
            </summary>
        </member>
        <member name="M:Upida.Aspnetmvc.UpidaJsonFormatter.#ctor">
            <summary>
            Creates an instance of the UpidaJsonFormatter
            </summary>
        </member>
        <member name="M:Upida.Aspnetmvc.UpidaJsonFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Parses JSON data from stream and converts it into a Dto object of the specific type.
            </summary>
            <param name="type">specific type</param>
            <param name="readStream">incoming JSON stream</param>
            <param name="content">content</param>
            <param name="formatterLogger">formatterLogger</param>
            <returns></returns>
        </member>
        <member name="T:Upida.IJsonParser">
            <summary>
            Defines JSON parser methods
            </summary>
        </member>
        <member name="M:Upida.IJsonParser.Parse``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Parses JSON data into domain object
            </summary>
            <typeparam name="T">domain object type</typeparam>
            <param name="form">JSON tree</param>
            <returns>parsed domain object instance</returns>
        </member>
        <member name="M:Upida.IJsonParser.Parse(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Parses JSON data into domain object
            </summary>
            <param name="node">JSON tree</param>
            <param name="type">domain object type</param>
            <returns>parsed domain object instance</returns>
        </member>
        <member name="M:Upida.IJsonParser.ParseList(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Parses JSON data into a list of domain objects
            </summary>
            <param name="node">JSON tree</param>
            <param name="type">domain object type</param>
            <returns>parsed domain object instance</returns>
        </member>
        <member name="T:Upida.IMapper">
            <summary>
            Defines Mapper class methods
            </summary>
        </member>
        <member name="M:Upida.IMapper.MapTo``1(``0,``0)">
            <summary>
            If implementd, recursively copies fields from the incoming domain object to the persistent dsestination object.
            Must be called on incoming data for updates.
            </summary>
            <param name="source">incoming source object must be Dtobase derived</param>
            <param name="dest">persistent dets object must be Dtobase derived</param>
        </member>
        <member name="M:Upida.IMapper.MapToCollection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If implementd, recursively copies fields from incoming collection of domain objects to the persistent collection.
            Must be called on incoming data for updates.
            </summary>
            <param name="type">Type of the source and dest object</param>
            <param name="sourceList">Incoming collection of domain objects</param>
            <param name="destSet">Persistent collection (ISet or IList)</param>
        </member>
        <member name="M:Upida.IMapper.Map``1(``0)">
            <summary>
            If implementd, recursively goes through fields of incoming domain object and assigns (back-references) parents to nested objects.
            Must be called before on incoming data for inserts.
            </summary>
            <typeparam name="T">must derive from Dtobase</typeparam>
            <param name="source">incoming domain object</param>
        </member>
        <member name="M:Upida.IMapper.FilterList``1(System.Collections.Generic.IList{``0},System.Byte)">
            <summary>
            If implementd, recursively copies data from the incoming domain object list to the outgoing one, taking serialization levels into account.
            If a property does not conform to the requested serialization level - it will be assigned NULL.
            Must be called before sending data to client.
            </summary>
            <typeparam name="T">must derive from Dtobase</typeparam>
            <param name="items">incoming domain object list</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object list</returns>
        </member>
        <member name="M:Upida.IMapper.Filter``1(``0,System.Byte)">
            <summary>
            If implementd, recursively copies data from the incoming domain object to the outgoing one, taking serialization levels into account.
            If a property does not conform to the requested serialization level - it will be assigned NULL.
            Must be called before sending data to client.
            </summary>
            <typeparam name="T">must derive from Dtobase</typeparam>
            <param name="item">incoming domain object</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object</returns>
        </member>
        <member name="T:Upida.Impl.JsonParser">
            <summary>
            Represents JSON parsing utility
            </summary>
        </member>
        <member name="M:Upida.Impl.JsonParser.Parse``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Parses JSON data into domain object
            </summary>
            <typeparam name="T">domain object type</typeparam>
            <param name="node">JSON tree</param>
            <returns>parsed domain object instance</returns>
        </member>
        <member name="M:Upida.Impl.JsonParser.Parse(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Parses JSON data into domain object
            </summary>
            <param name="node">JSON tree</param>
            <param name="type">domain object type</param>
            <returns>parsed domain object instance</returns>
        </member>
        <member name="M:Upida.Impl.JsonParser.ParseList(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Parses JSON data into a list of domain objects
            </summary>
            <param name="node">JSON tree</param>
            <param name="type">domain object type</param>
            <returns>parsed domain object instance</returns>
        </member>
        <member name="T:Upida.Impl.Mapper">
            <summary>
            Represents Mapping and Filtering helper class
            </summary>
        </member>
        <member name="M:Upida.Impl.Mapper.MapTo``1(``0,``0)">
            <summary>
            Recursively copies fields from incoming source object to persistent dest object.
            </summary>
            <typeparam name="T">Must derive from Dtobase</typeparam>
            <param name="source">Incoming source object must be Dtobase derived</param>
            <param name="dest">Persistent dets object must be Dtobase derived</param>
        </member>
        <member name="M:Upida.Impl.Mapper.MapToCollection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Recursively copies fields from incoming collection of domain objects to the persistent collection
            </summary>
            <typeparam name="T">Type of the source and dest objects (Must derive from Dtobase)</typeparam>
            <param name="source">Incoming collection of domain objects</param>
            <param name="dest">Persistent collection (ISet or IList)</param>
        </member>
        <member name="M:Upida.Impl.Mapper.Map``1(``0)">
            <summary>
            Recursively goes through fields of incoming domain object and assigns parents to nested objects
            </summary>
            <typeparam name="T">Type of the source object (Must derive from Dtobase)</typeparam>
            <param name="source">Incoming domain object</param>
        </member>
        <member name="M:Upida.Impl.Mapper.MapCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Recursively goes through fields of incoming domain object collection and assigns parents to nested objects
            </summary>
            <typeparam name="T">Must derive from Dtobase</typeparam>
            <param name="source">Incoming domain object collection</param>
        </member>
        <member name="M:Upida.Impl.Mapper.FilterList``1(System.Collections.Generic.IList{``0},System.Byte)">
            <summary>
            Recursively copies data from the incoming domain object list to the outgoing one, taking serializations levels into account
            </summary>
            <typeparam name="T">type of the domain object</typeparam>
            <param name="items">incoming domain object list</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object list</returns>
        </member>
        <member name="M:Upida.Impl.Mapper.Filter``1(``0,System.Byte)">
            <summary>
            Recursively copies data from the incoming domain object to the outgoing one, taking serializations levels into account
            </summary>
            <typeparam name="T">type of the domain object</typeparam>
            <param name="item">incoming domain object</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object</returns>
        </member>
        <member name="T:Upida.Impl.PropertyMetaFactory">
            <summary>
            Represents PropertyMeta class factory
            </summary>
        </member>
        <member name="M:Upida.Impl.PropertyMetaFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            Creates an instance of PropertyMeta class based on property descriptor
            </summary>
            <param name="descriptor">property descriptor</param>
            <returns>instance of PropertyMeta class</returns>
        </member>
        <member name="T:Upida.Impl.StandardParsers">
            <summary>
            Defines set od standard .net types parsers
            </summary>
        </member>
        <member name="T:Upida.IParser">
            <summary>
            Defines JsonParser class methods
            </summary>
        </member>
        <member name="M:Upida.IParser.ParseTextValue(System.Type,System.String)">
            <summary>
            Must throw ArgumentException if parsing failed
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="T:Upida.DtoAttribute">
            <summary>
            Represents marker attribute for DTO class properties
            </summary>
        </member>
        <member name="M:Upida.DtoAttribute.#ctor">
            <summary>
            Creates instance of the DtoAttribute class
            </summary>
        </member>
        <member name="M:Upida.DtoAttribute.#ctor(System.Byte)">
            <summary>
            Creates instance of the DtoAttribute class
            </summary>
            <param name="value">serialization level</param>
        </member>
        <member name="M:Upida.DtoAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates instance of the DtoAttribute class
            </summary>
            <param name="value">serialization level</param>
            <param name="nested">nested class serialization level</param>
        </member>
        <member name="P:Upida.DtoAttribute.Value">
            <summary>
            Gets or sets value that represents serialization level, applied to current property
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.Nested">
            <summary>
            Gets or sets value that represents serialization level, applied to child properties. Used only when decorated property is DTO class
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.IsCustomType">
            <summary>
            Gets or sets value that tells if decorated property is custom Hibernate type
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.Parser">
            <summary>
            Gets or sets value that represents parser object, used to parse this property from text
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.Dynamic">
            <summary>
            Gets or sets value that indicates if nested serialization level is resolved dynamically.
            Nested level can be dynamic if you are trying to serialize parent object using some level higher than the level indicated in the DtoAttribute.Value.
            In this case the nested level is calculated at runtime based on difference between the required level and the DtoAttribute.Value.
            This difference is added to the DtoAttribute.Nested serialization level. This behaviour works only if Dynamic property is true.
            </summary>
        </member>
        <member name="T:Upida.Dtobase">
            <summary>
            Represents base DTO class. You must derive your domain/dto classes from Dtobase to make Upida features available.
            </summary>
        </member>
        <member name="M:Upida.Dtobase.AddAssignedField(System.String)">
            <summary>
            Adds field to the list of assigned fields (used internally)
            </summary>
            <param name="field">field name</param>
        </member>
        <member name="M:Upida.Dtobase.AddWrongField(System.String)">
            <summary>
            Adds field to the list of errored fields (used internally)
            </summary>
            <param name="field">field name</param>
        </member>
        <member name="M:Upida.Dtobase.IsFieldAssigned(System.String)">
            <summary>
            Checks if field is assigned
            </summary>
            <param name="field">field name</param>
            <returns>true if assigned</returns>
        </member>
        <member name="M:Upida.Dtobase.IsFieldWrong(System.String)">
            <summary>
            Checks if field is errored
            </summary>
            <param name="field">field name</param>
            <returns>true if errored</returns>
        </member>
        <member name="M:Upida.Dtobase.GetAssignedFields">
            <summary>
            Returns set of assigned field names (fields that were assigned by JSON deserializer)
            </summary>
            <returns>set of field names</returns>
        </member>
        <member name="M:Upida.Dtobase.GetWrongFields">
            <summary>
            Returns set of wrong fields (fields that failed to be parsed)
            </summary>
            <returns>set of field names</returns>
        </member>
        <member name="T:Upida.IChild">
            <summary>
            Defines a method for cascaded child domain objects
            </summary>
        </member>
        <member name="M:Upida.IChild.ConnectToParent(System.Object)">
            <summary>
            Connects parent domain object to a child domain object
            </summary>
            <param name="parent"></param>
        </member>
        <member name="T:Upida.ListAndSet`1">
            <summary>
            Represents common class for IList and ISet collections. Used internally by JSON deserializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Upida.ListAndSet`1.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Upida.ListAndSet`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Upida.ListAndSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <member name="M:Upida.ListAndSet`1.Add(`0)">
            <summary>
            Adds an object to the end of the List
            </summary>
            <param name="o">object</param>
            <returns>true if added</returns>
        </member>
        <member name="M:Upida.ListAndSet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.Clone">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection
            </summary>
            <param name="o">The object to be added to the end of the collection</param>
            <returns>true if added</returns>
        </member>
        <member name="M:Upida.ListAndSet`1.AddAll(System.Collections.ICollection)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.ContainsAll(System.Collections.ICollection)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="o">The object to remove from the collection</param>
            <returns>true if removed</returns>
        </member>
        <member name="M:Upida.ListAndSet`1.RemoveAll(System.Collections.ICollection)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.RetainAll(System.Collections.ICollection)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Upida.ListAndSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Upida.ListAndSet`1.IsEmpty">
            <summary>
            True if collection is empty
            </summary>
        </member>
        <member name="T:Upida.Impl.PropertyMeta">
            <summary>
            Represents Domain object Property metadata
            </summary>
        </member>
        <member name="M:Upida.Impl.PropertyMeta.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializesa new instance of the PropertyMeta class
            </summary>
            <param name="descriptor"></param>
        </member>
        <member name="M:Upida.Impl.PropertyMeta.HasLevel(System.Byte)">
            <summary>
            Determines if the property falls into the requested serialization level
            </summary>
            <param name="level">the requested serialization level</param>
            <returns>true is yes</returns>
        </member>
        <member name="M:Upida.Impl.PropertyMeta.IsAssigned(Upida.Dtobase)">
            <summary>
            Determines if the property instance is assigned by JSON deserializer
            </summary>
            <param name="target">object instance</param>
            <returns>true if assigned</returns>
        </member>
        <member name="M:Upida.Impl.PropertyMeta.Write(Upida.Dtobase,System.Object)">
            <summary>
            Assignes value to a property instance
            </summary>
            <param name="target">object instance</param>
            <param name="value">value</param>
        </member>
        <member name="M:Upida.Impl.PropertyMeta.Read(Upida.Dtobase)">
            <summary>
            Reads value of the property instance
            </summary>
            <param name="target">object instance</param>
            <returns>value</returns>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.Name">
            <summary>
            Gets property name
            </summary>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.PropertyClass">
            <summary>
            Gets property class
            </summary>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.PropertyClassType">
            <summary>
            Gets property class type
            </summary>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.Parser">
            <summary>
            Gets property parser object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Upida.Impl.PropertyMeta.InnerGenericClass" -->
        <member name="P:Upida.Impl.PropertyMeta.DtoLevel">
            <summary>
            Gets serialization level assigned to the property
            </summary>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.DtoNestedLevel">
            <summary>
            Gets serialization level assigned to property children
            </summary>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.DtoCustomType">
            <summary>
            Returns true if the property is custom type (used for Hibernate custom types)
            </summary>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.DtoDynamic">
            <summary>
            Returns true if serialization level assigned to property children is resolved dynamicaly
            </summary>
        </member>
        <member name="P:Upida.Impl.PropertyMeta.Valid">
            <summary>
            Returns true is property is valid DTO
            </summary>
        </member>
        <member name="T:Upida.Impl.UpidaContext">
            <summary>
            Represents Upida context object (used internally to store context data)
            </summary>
        </member>
        <member name="M:Upida.Impl.UpidaContext.GetPropertyDefs(System.Type)">
            <summary>
            Generates an array of ProperyMeta class from a domain class
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Upida.Impl.UpidaContext.BuildParser(System.String,System.Type,Upida.Impl.PropertyMeta.ClassType,Upida.DtoAttribute)">
            <summary>
            Creates a property parser instance based on property class
            </summary>
            <param name="name">property name</param>
            <param name="propertyClass">property class</param>
            <param name="propertyClassType">property class type</param>
            <param name="annotation">DtoAttribute instance</param>
            <returns>parser instance</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Upida.Impl.UpidaContext.BuildList(System.Type)" -->
        <member name="P:Upida.Impl.UpidaContext.Current">
            <summary>
            Gets current Upida context
            </summary>
        </member>
        <member name="P:Upida.Impl.UpidaContext.PathHelper">
            <summary>
            Gets singleton instance of the PathHelpr class
            </summary>
        </member>
        <member name="P:Upida.Impl.UpidaContext.Checker">
            <summary>
            Gets singleton instance of the Checker class
            </summary>
        </member>
        <member name="P:Upida.Impl.UpidaContext.Math">
            <summary>
            Gets singleton instance of the Math class
            </summary>
        </member>
        <member name="M:Upida.Validation.IChecker.IsAssigned(System.String,Upida.Dtobase)">
            <summary>
            Checks if field value is assigned
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsValidFormat(System.String,Upida.Dtobase)">
            <summary>
            Checks if field value was correctly parsed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsNull(System.Object)">
            <summary>
            Checks if field value is NULL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsEqualTo(System.Object,System.Object)">
            <summary>
            Checks if field value equals to m
            </summary>
            <param name="m">m</param>
            <param name="value">field value</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsEqualToOneOf(System.Object[],System.Object)">
            <summary>
            Checks if field value is equal to one of values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsEmptyString(System.String)">
            <summary>
            Checks if field value is empty string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsLengthBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Checks if field value length is between min and max values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsLessOrEqualTo(System.Object,System.IComparable)">
            <summary>
            Checks if field value is less than or equal to 'm'
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsLessThan(System.Object,System.IComparable)">
            <summary>
            Checks if field value is less than 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsGreaterOrEqualTo(System.Object,System.IComparable)">
            <summary>
            Checks if field value is greater than or equal to 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsGreaterThan(System.Object,System.IComparable)">
            <summary>
            Checks if field value is greater than 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsCountBetween(System.Int32,System.Int32,System.Collections.ICollection)">
            <summary>
            Checks if field value collection size is between min and max values inclusively (field must implement ICollection)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.IChecker.IsRegexpr(System.String,System.String)">
            <summary>
            Checks if field value qualifies to regular expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:Upida.Validation.Impl.Checker">
            <summary>
            Represents validation checker helper class
            </summary>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsAssigned(System.String,Upida.Dtobase)">
            <summary>
            Checks if field value is assigned
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsValidFormat(System.String,Upida.Dtobase)">
            <summary>
            Checks if field value was correctly parsed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsNull(System.Object)">
            <summary>
            Checks if field value is NULL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsEqualTo(System.Object,System.Object)">
            <summary>
            Checks if field value equals to m
            </summary>
            <param name="m">m</param>
            <param name="value">field value</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsEqualToOneOf(System.Object[],System.Object)">
            <summary>
            Checks if field value is equal to one of values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsEmptyString(System.String)">
            <summary>
            Checks if field value is empty string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsLengthBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Checks if field value length is between min and max values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsLessOrEqualTo(System.Object,System.IComparable)">
            <summary>
            Checks if field value is less than or equal to 'm'
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsLessThan(System.Object,System.IComparable)">
            <summary>
            Checks if field value is less than 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsGreaterOrEqualTo(System.Object,System.IComparable)">
            <summary>
            Checks if field value is greater than or equal to 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsGreaterThan(System.Object,System.IComparable)">
            <summary>
            Checks if field value is greater than 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsCountBetween(System.Int32,System.Int32,System.Collections.ICollection)">
            <summary>
            Checks if field value collection size is between min and max values inclusively (field must implement ICollection)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.Impl.Checker.IsRegexpr(System.String,System.String)">
            <summary>
            Checks if field value qualifies to regular expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:Upida.Validation.FailResponse">
            <summary>
            Represents result of validation
            </summary>
        </member>
        <member name="M:Upida.Validation.FailResponse.#ctor">
            <summary>
            Creates instance of the FailResponse class
            </summary>
        </member>
        <member name="M:Upida.Validation.FailResponse.#ctor(Upida.Validation.IFailureList)">
            <summary>
            Creates instance of the FailResponse class and fills it with a list of failures
            </summary>
            <param name="failures">list of failures</param>
        </member>
        <member name="M:Upida.Validation.FailResponse.#ctor(System.String)">
            <summary>
            Creates an instance of the FailureResponse class with one failure in it
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Upida.Validation.FailResponse.Failures">
            <summary>
            List of failures
            </summary>
        </member>
        <member name="T:Upida.Validation.Failure">
            <summary>
            Represents a single validation failure
            </summary>
        </member>
        <member name="M:Upida.Validation.Failure.#ctor(System.String,System.String)">
            <summary>
            Creates instance of the Failure class
            </summary>
            <param name="key">key</param>
            <param name="text">text</param>
            <param name="severity">severity</param>
        </member>
        <member name="P:Upida.Validation.Failure.Key">
            <summary>
            Key (property path) of the failure
            </summary>
        </member>
        <member name="P:Upida.Validation.Failure.Text">
            <summary>
            Text message of the failure
            </summary>
        </member>
        <member name="T:Upida.Validation.IMath">
            <summary>
            Defines arithmetic operations.
            All methods return 'false' if one of the parameters is NULL, otherwise arithmetic result is returned
            </summary>
        </member>
        <member name="T:Upida.Validation.Impl.Math">
            <summary>
            Defines arithmetic operations.
            All methods return 'false' if one of the parameters is NULL, otherwise arithmetic result is returned
            </summary>
        </member>
        <member name="T:Upida.Validation.Impl.PathHelper">
            <summary>
            Represents property path builder class
            </summary>
        </member>
        <member name="T:Upida.Validation.IPathHelper">
            <summary>
            Defines methods for building property path
            </summary>
        </member>
        <member name="M:Upida.Validation.IPathHelper.BuildPath(System.Collections.Generic.LinkedList{Upida.Validation.Impl.PathNode},System.String)">
            <summary>
            Builds property path using existing path and a nested property name
            </summary>
            <param name="path">existing path</param>
            <param name="name">nested property name</param>
            <returns>property path text</returns>
        </member>
        <member name="M:Upida.Validation.Impl.PathHelper.BuildPath(System.Collections.Generic.LinkedList{Upida.Validation.Impl.PathNode},System.String)">
            <summary>
            Builds property path using existing path and a nested property name
            </summary>
            <param name="path">existing path</param>
            <param name="name">nested property name</param>
            <returns>property path text</returns>
        </member>
        <member name="T:Upida.Validation.Impl.FailureList">
            <summary>
            Represents list of failures
            </summary>
        </member>
        <member name="T:Upida.Validation.IFailureList">
            <summary>
            Represents list of validation failures
            </summary>
        </member>
        <member name="M:Upida.Validation.IFailureList.Fail(Upida.Validation.Failure)">
            <summary>
            Adds a new failure object to the list
            </summary>
            <param name="item">failure object</param>
        </member>
        <member name="M:Upida.Validation.IFailureList.Fail(System.String,System.String)">
            <summary>
            Adds a new failure object to the list
            </summary>
            <param name="key">key of the failure</param>
            <param name="text">text of the failure</param>
        </member>
        <member name="M:Upida.Validation.IFailureList.FailIf(System.Boolean,System.String,System.String)">
            <summary>
            Adds a new failure object to the list if condition is true
            </summary>
            <param name="condition">condition</param>
            <param name="key">key of the failure</param>
            <param name="text">text of the failure</param>
        </member>
        <member name="P:Upida.Validation.IFailureList.IsEmpty">
            <summary>
            True if list is empty
            </summary>
        </member>
        <member name="M:Upida.Validation.Impl.FailureList.#ctor">
            <summary>
            Creates new Failure instance
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Upida.Validation.Impl.FailureList.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Upida.Validation.Impl.FailureList.#ctor(System.Collections.Generic.IEnumerable{Upida.Validation.Failure})" -->
        <member name="M:Upida.Validation.Impl.FailureList.Fail(Upida.Validation.Failure)">
            <summary>
            Adds a new failure object to the list
            </summary>
            <param name="item">failure object</param>
        </member>
        <member name="M:Upida.Validation.Impl.FailureList.Fail(System.String,System.String)">
            <summary>
             Adds a new failure object to the list with key and text message
            </summary>
            <param name="key">failure key (property path)</param>
            <param name="text">text message</param>
        </member>
        <member name="M:Upida.Validation.Impl.FailureList.FailIf(System.Boolean,System.String,System.String)">
            <summary>
            Adds a new failure object to the list if condition is true
            </summary>
            <param name="condition">condition</param>
            <param name="key">failure key (property path)</param>
            <param name="text">text message</param>
        </member>
        <member name="P:Upida.Validation.Impl.FailureList.IsEmpty">
            <summary>
            True if list is empty
            </summary>
        </member>
        <member name="T:Upida.Validation.Impl.PathNode">
            <summary>
            Represents property path node
            </summary>
        </member>
        <member name="P:Upida.Validation.Impl.PathNode.Index">
            <summary>
            Node index (valid for arrays and lists)
            </summary>
        </member>
        <member name="P:Upida.Validation.Impl.PathNode.Name">
            <summary>
            Node name
            </summary>
        </member>
        <member name="T:Upida.Validation.Severity">
            <summary>
            Defines Severity levels
            </summary>
        </member>
        <member name="F:Upida.Validation.Severity.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Upida.Validation.Severity.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Upida.Validation.Severity.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Upida.Validation.Severity.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="T:Upida.Validation.IUpidaValidationContext">
            <summary>
            Defines Validation context routines
            </summary>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.SetTarget(Upida.Dtobase)">
            <summary>
            Sets current target object
            </summary>
            <param name="value">target object</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.SetIndex(System.Int32)">
            <summary>
            Sets current index (used for indexed properties).
            For ex. current target is 'Children' and index is '7' and field 'Name' - failure would have path this path - 'children[7].name'.
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.SetField(System.String,System.Object)">
            <summary>
            Sets current field (property) name
            </summary>
            <param name="name">field property name</param>
            <param name="value">field value</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.AddNested">
            <summary>
            Propogates current field to path.
            For ex. if current field is 'User', call AddNested(), then call SetField("Name", null) - the failure path would be - User.Name.
            Usually after AddNested() call, SetTarget() must be called as well.
            </summary>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.RemoveNested">
            <summary>
            Goes onу node back in path
            </summary>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.FailRoot(System.String)">
            <summary>
            Register failure without path
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.Fail(System.String)">
            <summary>
            Register failure using current path
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.Fail(Upida.Validation.Failure)">
            <summary>
            Register failure
            </summary>
            <param name="failure">failure object</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.IsAssigned">
            <summary>
            True if current field is assigned, otherwise false
            </summary>
            <returns>true is assigned</returns>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.IsNull">
            <summary>
            True is current field is null, otherwise false
            </summary>
            <returns>true is null</returns>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.IsValidFormat">
            <summary>
            True if current field is correctly parsed, otherwise false
            </summary>
            <returns>true if valid</returns>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustHaveMinAssignedFieldsCount(System.Int32,System.String)">
            <summary>
            Validates if number of assigned fields in the current target is greater or equal to min number
            </summary>
            <param name="count">min number of assigned fields</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustHaveMaxAssignedFieldsCount(System.Int32,System.String)">
            <summary>
            Validates if number of assigned fields in the current target is less or equal to max number
            </summary>
            <param name="count">max number of assigned fields</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeAssigned(System.String)">
            <summary>
            Validates if current field is assigned (was present in incoming JSON)
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeNotAssigned(System.String)">
            <summary>
            Validates if current field value is not assigned by JSON deserializer
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeValidFormat(System.String)">
            <summary>
            Validates if current field value is correctly parsed
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeNull(System.String)">
            <summary>
            Validates if current field value is null
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeNotNull(System.String)">
            <summary>
            Validates if current field value is not null
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value is equal to the value
            </summary>
            <param name="value">the value</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustNotEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value is not equal to the value
            </summary>
            <param name="value">the value</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustEqualToOneOf(System.Object[],System.String)">
            <summary>
            Validates if current field value is equal to one of the values
            </summary>
            <param name="values">the values</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustNotEqualToAnyOf(System.Object[],System.String)">
            <summary>
            Validates if current field value is not equal to any of the values
            </summary>
            <param name="values">the values</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeNotEmptyString(System.String)">
            <summary>
            Validates if current field value is not string.Empty
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustHaveLengthBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Validates if current field value length (string.Length) is between min and max
            </summary>
            <param name="min">min string.Length</param>
            <param name="max">max string.Length</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeLessOrEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is less or equal to m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeLessThan(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is less than m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeGreaterOrEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is greater or equal to m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustBeGreaterThan(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is greater than m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustHaveCountBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Validates if current field value count (ICollection.Count) is between min and max count
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.MustRegexpr(System.String,System.String)">
            <summary>
            Validates if current field value follows the regular expression
            </summary>
            <param name="expr">the regular expression</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IUpidaValidationContext.Assert">
            <summary>
            Throws ValidationException if at least one failure was registered
            </summary>
        </member>
        <member name="P:Upida.Validation.IUpidaValidationContext.IsValid">
            <summary>
            False, if at least on failure is recorded, otherwise true
            </summary>
        </member>
        <member name="P:Upida.Validation.IUpidaValidationContext.IsTargetValid">
            <summary>
            False, if at least on failure is recorded for the current target, otherwise true
            </summary>
        </member>
        <member name="P:Upida.Validation.IUpidaValidationContext.IsFieldValid">
            <summary>
            False, if at least on failure is recorded for the current field, otherwise true
            </summary>
        </member>
        <member name="P:Upida.Validation.IUpidaValidationContext.Math">
            <summary>
            Gets Math helper object
            </summary>
        </member>
        <member name="T:Upida.Validation.ValidationException">
            <summary>
            Represents Validation exception
            </summary>
        </member>
        <member name="M:Upida.Validation.ValidationException.#ctor(Upida.Validation.IFailureList)">
            <summary>
            Initializes new instance of the ValidationException class
            </summary>
            <param name="errors">list of failures</param>
        </member>
        <member name="M:Upida.Validation.ValidationException.BuildFailResponse">
            <summary>
            Generates FailResponse object
            </summary>
            <returns>instance of FailResponse class</returns>
        </member>
        <member name="P:Upida.Validation.ValidationException.Failures">
            <summary>
            Gets list of failures
            </summary>
        </member>
        <member name="T:Upida.Validation.Impl.UpidaValidationContext">
            <summary>
            Represents basic set of validation routines
            </summary>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.#ctor">
            <summary>
            Initializes new instance of the ValidationContext class
            </summary>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.SetTarget(Upida.Dtobase)">
            <summary>
            Sets current target object
            </summary>
            <param name="value">target object</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.SetIndex(System.Int32)">
            <summary>
            Sets current index (used for indexed properties).
            For ex. current target is 'Children' and index is '7' and field 'Name' - failure would have path this path - 'children[7].name'.
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.SetField(System.String,System.Object)">
            <summary>
            Sets current field (property) name
            </summary>
            <param name="name">field property name</param>
            <param name="value">field value</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.AddNested">
            <summary>
            Propogates current field to path.
            For ex. if current field is 'User', call AddNested(), then call SetField("Name", null) - the failure path would be - User.Name.
            Usually after AddNested() call, SetTarget() must be called as well.
            </summary>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.RemoveNested">
            <summary>
            Goes onу node back in path.
            </summary>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.FailRoot(System.String)">
            <summary>
            Register failure without path
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.Fail(System.String)">
            <summary>
            Register failure using current path
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.Fail(Upida.Validation.Failure)">
            <summary>
            Register failure
            </summary>
            <param name="failure">failure object</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.IsAssigned">
            <summary>
            True if current field is assigned, otherwise false
            </summary>
            <returns>true is assigned</returns>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.IsNull">
            <summary>
            True is current field is null, otherwise false
            </summary>
            <returns>true is null</returns>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.IsValidFormat">
            <summary>
            True if current field is correctly parsed, otherwise false
            </summary>
            <returns>true if valid</returns>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustHaveMaxAssignedFieldsCount(System.Int32,System.String)">
            <summary>
            Validates if number of assigned fields in the current target is less or equal to max number
            </summary>
            <param name="count">max number of assigned fields</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustHaveMinAssignedFieldsCount(System.Int32,System.String)">
            <summary>
            Validates if number of assigned fields in the current target is greater or equal to min number
            </summary>
            <param name="count">min number of assigned fields</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeAssigned(System.String)">
            <summary>
            Validates if current field is assigned (was present in incoming JSON)
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeNotAssigned(System.String)">
            <summary>
            Validates if current field value is not assigned by JSON deserializer
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeValidFormat(System.String)">
            <summary>
            Validates if current field value is correctly parsed
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeNull(System.String)">
            <summary>
            Validates if current field value is null
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeNotNull(System.String)">
            <summary>
            Validates if current field value is not null
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value is equal to the value
            </summary>
            <param name="value">the value</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustNotEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value is not equal to the value
            </summary>
            <param name="value">the value</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustEqualToOneOf(System.Object[],System.String)">
            <summary>
            Validates if current field value is equal to one of the values
            </summary>
            <param name="values">the values</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustNotEqualToAnyOf(System.Object[],System.String)">
            <summary>
            Validates if current field value is not equal to any of the values
            </summary>
            <param name="values">the values</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeNotEmptyString(System.String)">
            <summary>
            Validates if current field value is not string.Empty
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustHaveLengthBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Validates if current field value length (string.Length) is between min and max
            </summary>
            <param name="min">min string.Length</param>
            <param name="max">max string.Length</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeLessOrEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is less or equal to m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeLessThan(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is less than m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeGreaterOrEqualTo(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is greater or equal to m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustBeGreaterThan(System.Object,System.String)">
            <summary>
            Validates if current field value (IComparable) is greater than m
            </summary>
            <param name="m">m</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustHaveCountBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Validates if current field value count (ICollection.Count) is between min and max count
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.MustRegexpr(System.String,System.String)">
            <summary>
            Validates if current field value follows the regular expression
            </summary>
            <param name="expr">the regular expression</param>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.Impl.UpidaValidationContext.Assert">
            <summary>
            Throws ValidationException if at least one failure was registered
            </summary>
        </member>
        <member name="P:Upida.Validation.Impl.UpidaValidationContext.IsValid">
            <summary>
            False, if at least on failure is recorded, otherwise true
            </summary>
        </member>
        <member name="P:Upida.Validation.Impl.UpidaValidationContext.IsTargetValid">
            <summary>
            False, if at least on failure is recorded for the current target, otherwise true
            </summary>
        </member>
        <member name="P:Upida.Validation.Impl.UpidaValidationContext.IsFieldValid">
            <summary>
            False, if at least on failure is recorded for the current field, otherwise true
            </summary>
        </member>
        <member name="P:Upida.Validation.Impl.UpidaValidationContext.Math">
            <summary>
            Gets Math helper object
            </summary>
        </member>
    </members>
</doc>
