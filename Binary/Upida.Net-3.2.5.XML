<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Upida.Net-3.2.5</name>
    </assembly>
    <members>
        <member name="T:Upida.Aspnetmvc.UpidaJsonFormatter">
            <summary>
            Represents JSON formatter above the standard Newtonsoft formatter
            </summary>
        </member>
        <member name="M:Upida.Aspnetmvc.UpidaJsonFormatter.#ctor">
            <summary>
            Creates an instance of the UpidaJsonFormatter
            </summary>
        </member>
        <member name="M:Upida.Aspnetmvc.UpidaJsonFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Parses JSON data from stream and converts it into a Dto object of the specific type.
            </summary>
            <param name="type">specific type</param>
            <param name="readStream">incoming JSON stream</param>
            <param name="content">content</param>
            <param name="formatterLogger">formatterLogger</param>
            <returns></returns>
        </member>
        <member name="M:Upida.IMapper.MapTo``1(``0,``0)">
            <summary>
            If implementd, recursively copies fields from the incoming domain object to the persistent dsestination object.
            Must be called on incoming data for updates.
            </summary>
            <param name="source">incoming source object must be Dtobase derived</param>
            <param name="dest">persistent dets object must be Dtobase derived</param>
        </member>
        <member name="M:Upida.IMapper.MapToCollection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If implementd, recursively copies fields from incoming collection of domain objects to the persistent collection.
            Must be called on incoming data for updates.
            </summary>
            <param name="type">Type of the source and dest object</param>
            <param name="sourceList">Incoming collection of domain objects</param>
            <param name="destSet">Persistent collection (ISet or IList)</param>
        </member>
        <member name="M:Upida.IMapper.Map``1(``0)">
            <summary>
            If implementd, recursively goes through fields of incoming domain object and assigns (back-references) parents to nested objects.
            Must be called before on incoming data for inserts.
            </summary>
            <typeparam name="T">must derive from Dtobase</typeparam>
            <param name="source">incoming domain object</param>
        </member>
        <member name="M:Upida.IMapper.FilterList``1(System.Collections.Generic.IList{``0},System.Byte)">
            <summary>
            If implementd, recursively copies data from the incoming domain object list to the outgoing one, taking serialization levels into account.
            If a property does not conform to the requested serialization level - it will be assigned NULL.
            Must be called before sending data to client.
            </summary>
            <typeparam name="T">must derive from Dtobase</typeparam>
            <param name="items">incoming domain object list</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object list</returns>
        </member>
        <member name="M:Upida.IMapper.Filter``1(``0,System.Byte)">
            <summary>
            If implementd, recursively copies data from the incoming domain object to the outgoing one, taking serialization levels into account.
            If a property does not conform to the requested serialization level - it will be assigned NULL.
            Must be called before sending data to client.
            </summary>
            <typeparam name="T">must derive from Dtobase</typeparam>
            <param name="item">incoming domain object</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Upida.JsonParser.Parse``1(Newtonsoft.Json.Linq.JToken)" -->
        <member name="T:Upida.Levels">
            <summary>
            Represents default set of serialization levels (or rules)
            </summary>
        </member>
        <member name="F:Upida.Levels.ID">
            <summary>
            LEVEL 10 - ID. Includes only ID fields
            </summary>
        </member>
        <member name="F:Upida.Levels.LOOKUP">
            <summary>
            LEVEL 20 - LOOKUP. Includes LOOKUP and ID fields
            </summary>
        </member>
        <member name="F:Upida.Levels.GRID">
            <summary>
            LEVEL 30 - GRID. Includes GRID, LOOKUP and ID fields
            </summary>
        </member>
        <member name="F:Upida.Levels.DEEP">
            <summary>
            LEVEL 40 - DEEP. Includes DEEP, GRID, LOOKUP and ID fields
            </summary>
        </member>
        <member name="F:Upida.Levels.FULL">
            <summary>
            Level 50 - FULL. Includes FULL, DEEP, GRID, LOOKUP and ID fields
            </summary>
        </member>
        <member name="F:Upida.Levels.NEVER">
            <summary>
            Highest level. Includes all levels. Fields marked with NEVER level, are supposed to be never included in the outgoing data.
            </summary>
        </member>
        <member name="M:Upida.Mapper.MapTo``1(``0,``0)">
            <summary>
            Recursively copies fields from incoming source object to persistent dest object.
            </summary>
            <typeparam name="T">Must derive from Dtobase</typeparam>
            <param name="source">Incoming source object must be Dtobase derived</param>
            <param name="dest">Persistent dets object must be Dtobase derived</param>
        </member>
        <member name="M:Upida.Mapper.MapToCollection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Recursively copies fields from incoming collection of domain objects to the persistent collection
            </summary>
            <param name="type">Type of the source and dest object</param>
            <param name="sourceList">Incoming collection of domain objects</param>
            <param name="destSet">Persistent collection (ISet or IList)</param>
        </member>
        <member name="M:Upida.Mapper.Map``1(``0)">
            <summary>
            Recursively goes through fields of incoming domain object and assigns parents to nested objects
            </summary>
            <typeparam name="T">Must derive from Dtobase</typeparam>
            <param name="source">Incoming domain object</param>
        </member>
        <member name="M:Upida.Mapper.MapCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Recursively goes through fields of incoming domain object collection and assigns parents to nested objects
            </summary>
            <typeparam name="T">Must derive from Dtobase</typeparam>
            <param name="source">Incoming domain object collection</param>
        </member>
        <member name="M:Upida.Mapper.FilterList``1(System.Collections.Generic.IList{``0},System.Byte)">
            <summary>
            Recursively copies data from the incoming domain object list to the outgoing one, taking serializations levels into account
            </summary>
            <typeparam name="T">type of the domain object</typeparam>
            <param name="items">incoming domain object list</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object list</returns>
        </member>
        <member name="M:Upida.Mapper.Filter``1(``0,System.Byte)">
            <summary>
            Recursively copies data from the incoming domain object to the outgoing one, taking serializations levels into account
            </summary>
            <typeparam name="T">type of the domain object</typeparam>
            <param name="item">incoming domain object</param>
            <param name="level">serialization level</param>
            <returns>outgoing domain object</returns>
        </member>
        <member name="M:Upida.IParser.ParseTextValue(System.Type,System.String)">
            <summary>
            Must throw ArgumentException if parsing failed
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Upida.DtoAttribute.#ctor">
            <summary>
            Creates instance of the DtoAttribute class
            </summary>
        </member>
        <member name="M:Upida.DtoAttribute.#ctor(System.Byte)">
            <summary>
            Creates instance of the DtoAttribute class
            </summary>
            <param name="value">serialization level</param>
        </member>
        <member name="P:Upida.DtoAttribute.Value">
            <summary>
            Gets or sets value that represents serialization level, applied to current property
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.Nested">
            <summary>
            Gets or sets value that represents serialization level, applied to child properties. Used only when decorated property is DTO class
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.IsCustomType">
            <summary>
            Gets or sets value that tells if decorated property is custom Hibernate type
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.Parser">
            <summary>
            Gets or sets value that represents parser object, used to parse this property from text
            </summary>
        </member>
        <member name="P:Upida.DtoAttribute.Dynamic">
            <summary>
            Gets or sets value that indicates if nested serialization level is resolved dynamically.
            Nested level can be dynamic if you are trying to serialize parent object using some level higher than the level indicated in the DtoAttribute.Value.
            In this case the nested level is calculated at runtime based on difference between the required level and the DtoAttribute.Value.
            This difference is added to the DtoAttribute.Nested serialization level. This behaviour works only if Dynamic property is true.
            </summary>
        </member>
        <member name="T:Upida.ListAndSet`1">
            <summary>
            Represents common class for IList and ISet collections. Used internally by JSON deserializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Upida.Aspnetmvc.AspMvcValidatorFactory">
            <summary>
            Validator Factory used in ASP.Net Mvc project
            </summary>
        </member>
        <member name="M:Upida.Validation.IValidatorFactory.GetInstance(System.Type)">
            <summary>
            Creates instance of the Type Validator
            </summary>
            <param name="typeValidatorType">type of the Type Validator</param>
            <returns>instance</returns>
        </member>
        <member name="M:Upida.Aspnetmvc.AspMvcValidatorFactory.GetInstance(System.Type)">
            <summary>
            Creates instance of the Type Validator
            </summary>
            <param name="typeValidatorType">Type Validator class</param>
            <returns></returns>
        </member>
        <member name="T:Upida.Validation.FailResponse">
            <summary>
            Represents result of validation
            </summary>
        </member>
        <member name="M:Upida.Validation.FailResponse.#ctor">
            <summary>
            Creates instance of the FailResponse class
            </summary>
        </member>
        <member name="M:Upida.Validation.FailResponse.#ctor(Upida.Validation.IFailureList)">
            <summary>
            Creates instance of the FailResponse class and fills it with a list of failures
            </summary>
            <param name="failures">list of failures</param>
        </member>
        <member name="M:Upida.Validation.FailResponse.#ctor(System.String)">
            <summary>
            Creates an instance of the FailureResponse class with one failure in it
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Upida.Validation.FailResponse.Failures">
            <summary>
            List of failures
            </summary>
        </member>
        <member name="T:Upida.Validation.Failure">
            <summary>
            Represents a single validation failure
            </summary>
        </member>
        <member name="M:Upida.Validation.Failure.#ctor(System.String,System.String,Upida.Validation.Severity)">
            <summary>
            Creates instance of the Failure class
            </summary>
            <param name="key">key</param>
            <param name="text">text</param>
            <param name="severity">severity</param>
        </member>
        <member name="M:Upida.Validation.Failure.GetSeverity">
            <summary>
            Returns severety of the failure
            </summary>
            <returns></returns>
        </member>
        <member name="P:Upida.Validation.Failure.Key">
            <summary>
            Property path of the failure
            </summary>
        </member>
        <member name="P:Upida.Validation.Failure.Text">
            <summary>
            Text message of the failure
            </summary>
        </member>
        <member name="T:Upida.Validation.IFailureList">
            <summary>
            Represents list of validation failures
            </summary>
        </member>
        <member name="M:Upida.Validation.IFailureList.Fail(Upida.Validation.Failure)">
            <summary>
            Adds a new failure object to the list
            </summary>
            <param name="item">failure object</param>
        </member>
        <member name="M:Upida.Validation.IFailureList.Fail(System.String,System.String,Upida.Validation.Severity)">
            <summary>
            Adds a new failure object to the list
            </summary>
            <param name="key">key of the failure</param>
            <param name="text">text of the failure</param>
            <param name="severity">severity of the failure</param>
        </member>
        <member name="M:Upida.Validation.IFailureList.FailIf(System.Boolean,System.String,System.String,Upida.Validation.Severity)">
            <summary>
            Adds a new failure object to the list if condition is true
            </summary>
            <param name="condition">condition</param>
            <param name="key">key of the failure</param>
            <param name="text">text of the failure</param>
            <param name="severity">severity of the failure</param>
        </member>
        <member name="P:Upida.Validation.IFailureList.Severity">
            <summary>
            The highest severity in the list of failures
            </summary>
        </member>
        <member name="P:Upida.Validation.IFailureList.IsEmpty">
            <summary>
            True if list is empty
            </summary>
        </member>
        <member name="M:Upida.Validation.FailureList.Fail(Upida.Validation.Failure)">
            <summary>
            Adds a new failure object to the list
            </summary>
            <param name="item">failure object</param>
        </member>
        <member name="P:Upida.Validation.FailureList.Severity">
            <summary>
            The highest severity in the list of failures
            </summary>
        </member>
        <member name="P:Upida.Validation.FailureList.IsEmpty">
            <summary>
            True if list is empty
            </summary>
        </member>
        <member name="M:Upida.Validation.ValidateWithAttribute.#ctor(System.Type,System.Object)">
            <summary>
            Creates new instance of the DtoAttribute
            </summary>
            <param name="validator">validator class</param>
            <param name="group">validaton group (you can use Upida.Validation.Groups enumeration)</param>
        </member>
        <member name="M:Upida.Validation.ValidateWithAttribute.#ctor(System.String,System.Object)">
            <summary>
            Creates new instance of the DtoAttribute
            </summary>
            <param name="validatorType">Fully qualified name of the validator class</param>
            <param name="group">validaton group (you can use Upida.Validation.Groups enumeration)</param>
        </member>
        <member name="P:Upida.Validation.ValidateWithAttribute.Validator">
            <summary>
            Type validator class
            </summary>
        </member>
        <member name="P:Upida.Validation.ValidateWithAttribute.Group">
            <summary>
            Validation group
            </summary>
        </member>
        <member name="T:Upida.Validation.IValidationContext">
            <summary>
            Defines base validation context members
            </summary>
        </member>
        <member name="M:Upida.Validation.IValidationContext.Validate``1(``0,System.Object)">
            <summary>
            Validates target and returns list of failures or Null
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
            <returns>list of failures</returns>
        </member>
        <member name="M:Upida.Validation.IValidationContext.Validate``1(``0,System.Object,System.Object)">
            <summary>
            Validates target and returns list of failures or Null
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
            <param name="state">optional state data</param>
            <returns>list of failures</returns>
        </member>
        <member name="M:Upida.Validation.IValidationContext.AssertValid``1(``0,System.Object)">
            <summary>
            Validates target and throws ValidationException with list of failures
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
        </member>
        <member name="M:Upida.Validation.IValidationContext.AssertValid``1(``0,System.Object,System.Object)">
            <summary>
            Validates target and throws ValidationException with list of failures
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
            <param name="state">optional state data</param>
        </member>
        <member name="M:Upida.Validation.IValidationContext.CreateFailureList">
            <summary>
            Creates empty list of failures.
            Method is used together with AssertIsEmpty() method for custom failures.
            Create list of failures and, based on this list, throw ValidationException, using the AssertIsEmpty() method.
            </summary>
            <returns>empty list of failures</returns>
        </member>
        <member name="M:Upida.Validation.IValidationContext.Assert(Upida.Validation.IFailureList)">
            <summary>
            Throws ValidationException if list of failures is not empty.
            This method is usually used together with CreateFailureList() method for custom failures.
            When creating a custom type validator with group is not an option, AssertIsEmpty is used,
            as the ValidationException can be thrown based on a custom list of Failures.
            Create list of failures and, based on this list, throw ValidationException, using the AssertIsEmpty() method.
            </summary>
            <param name="errors">list of failures</param>
        </member>
        <member name="T:Upida.Validation.IValidatorBase">
            <summary>
            Defines base type validator members
            </summary>
        </member>
        <member name="M:Upida.Validation.IValidatorBase.Fail(System.String)">
            <summary>
            Registers a failure
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.IValidatorBase.Fail(Upida.Validation.Failure)">
            <summary>
            Registers a failure
            </summary>
            <param name="failure">failure object</param>
        </member>
        <member name="M:Upida.Validation.IValidatorBase.Validate(System.Object)">
            <summary>
            Validates current object and passes state information
            </summary>
            <param name="state">state information</param>
        </member>
        <member name="M:Upida.Validation.ValidationContext.Validate``1(``0,System.Object)">
            <summary>
            Validates target and returns list of failures or Null
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
            <returns>list of failures</returns>
        </member>
        <member name="M:Upida.Validation.ValidationContext.Validate``1(``0,System.Object,System.Object)">
            <summary>
            Validates target and returns list of failures or Null
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
            <param name="state">optional state data</param>
            <returns>list of failures</returns>
        </member>
        <member name="M:Upida.Validation.ValidationContext.AssertValid``1(``0,System.Object)">
            <summary>
            Validates target and throws ValidationException with list of failures
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
        </member>
        <member name="M:Upida.Validation.ValidationContext.AssertValid``1(``0,System.Object,System.Object)">
            <summary>
            Validates target and throws ValidationException with list of failures
            </summary>
            <typeparam name="T">type of object to validate</typeparam>
            <param name="target">object to validate</param>
            <param name="group">validation group</param>
            <param name="state">optional state data</param>
        </member>
        <member name="M:Upida.Validation.ValidationContext.CreateFailureList">
            <summary>
            Creates empty list of failures.
            Method is used together with AssertIsEmpty() method for custom failures.
            Create list of failures and, based on this list, throw ValidationException, using the AssertIsEmpty() method.
            </summary>
            <returns>empty list of failures</returns>
        </member>
        <member name="M:Upida.Validation.ValidationContext.Assert(Upida.Validation.IFailureList)">
            <summary>
            Throws ValidationException if list of failures is not empty.
            This method is usually used together with CreateFailureList() method for custom failures.
            When creating a custom type validator with group is not an option, AssertIsEmpty is used,
            as the ValidationException can be thrown based on a custom list of Failures.
            Create list of failures and, based on this list, throw ValidationException, using the AssertIsEmpty() method.
            </summary>
            <param name="errors">list of failures</param>
        </member>
        <member name="T:Upida.Validation.ValidatorBase`1">
            <summary>
            Represents basic set of type validator members
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.GetFailures">
            <summary>
            Returns list of failures for the target object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.SetTarget(`0,System.String,Upida.Validation.IValidatorBase)">
            <summary>
            Sets target validated object
            </summary>
            <param name="target">target validated object</param>
            <param name="path">path to this object in hierarchy (null for root)</param>
            <param name="parent">parent validator</param>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.SetSeverity(Upida.Validation.Severity)">
            <summary>
            Sets severity of the next checking.
            Severity is reset to None after checking is done.
            </summary>
            <param name="severity"></param>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.Field(System.String,System.Object)">
            <summary>
            Sets current validated field value and name.
            if value is not NULL, it automatically marks this field as assigned (even if it was not present in JSON)I
            </summary>
            <param name="name">name of the field</param>
            <param name="value">field value</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.Field(System.String)">
            <summary>
            Sets current validated field name and value as NULL
            </summary>
            <param name="name">name of the field</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.Stop">
            <summary>
            Disables validation for the current field if it is allready failed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.Nested``1(System.Object,System.Object)">
            <summary>
            Triggers validation on nested object against specific group
            </summary>
            <typeparam name="R">Type of the validated object</typeparam>
            <param name="group">validation group</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.NestedList``1(System.Object,System.Object)">
            <summary>
            Triggers validation on each object from the nested collection of objects against specific group
            </summary>
            <typeparam name="R">Type of the validated object</typeparam>
            <param name="group">validation group</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.Fail(System.String)">
            <summary>
            Registers a failure against the current property.
            Current property is determined by the last call of the Field() method.
            </summary>
            <param name="msg">failure message</param>
        </member>
        <member name="M:Upida.Validation.ValidatorBase`1.Fail(Upida.Validation.Failure)">
            <summary>
            Registers a failure (failure includes failure message and property path)
            </summary>
            <param name="failure">failure</param>
        </member>
        <member name="P:Upida.Validation.ValidatorBase`1.IsValidField">
            <summary>
            True if current field is valid so far
            </summary>
        </member>
        <member name="P:Upida.Validation.ValidatorBase`1.IsValid">
            <summary>
            True is the target object is valid so far
            </summary>
        </member>
        <member name="P:Upida.Validation.ValidatorBase`1.Stopped">
            <summary>
            True if validation is stopped for the current field. You can stop validation for current field only if Stop() method is called and the field is invalid
            </summary>
        </member>
        <member name="P:Upida.Validation.ValidatorBase`1.Target">
            <summary>
            Represents target object
            </summary>
        </member>
        <member name="P:Upida.Validation.ValidatorBase`1.Value">
            <summary>
            Represents value of the current field
            </summary>
        </member>
        <member name="P:Upida.Validation.ValidatorBase`1.Name">
            <summary>
            Represents name of the current field
            </summary>
        </member>
        <member name="T:Upida.Validation.ConstraintValidator`1">
            <summary>
            Represents standard set of validation routines
            </summary>
            <typeparam name="T">validated type</typeparam>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsAssigned">
            <summary>
            Checks if field value is assigned
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeAssigned(System.String)">
            <summary>
            Validates if field is assigned some value by parser. Stops if failed.
            </summary>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeNotAssigned(System.String)">
            <summary>
            Validates if field is clean - never assigned any value by parser
            </summary>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsValidFormat">
            <summary>
            Checks if field value was correctly parsed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeValidFormat(System.String)">
            <summary>
            Validates if field is correctly parsed. Stops if failed.
            </summary>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsNull">
            <summary>
            Checks if field value is NULL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeNull(System.String)">
            <summary>
            Validates if field value is null
            </summary>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeNotNull(System.String)">
            <summary>
            Validates if field value is not null. Stops if failed.
            </summary>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsEqualTo(System.Object)">
            <summary>
            Checks if field value is equal to something
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustEqualTo(System.Object,System.String)">
            <summary>
            Validates if field value is equal to destination value
            </summary>
            <param name="value">destination value</param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustNotEqualTo(System.Object,System.String)">
            <summary>
            Validates field value not equal to destination value
            </summary>
            <param name="value">destination value</param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsEqualToOneOf(System.Object[])">
            <summary>
            Checks if field value is equal to one of values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustEqualToOneOf(System.Object[],System.String)">
            <summary>
            Validates if field value is equal to destination value
            </summary>
            <param name="value">destination value</param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustNotEqualToAnyOf(System.Object[],System.String)">
            <summary>
            Validates field value not equal to destination value
            </summary>
            <param name="value">destination value</param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsEmptyString">
            <summary>
            Checks if field value is empty string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeNotEmptyString(System.String)">
            <summary>
            Validates field value is not empty - (for string only)
            </summary>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsLengthBetween(System.Int32,System.Int32)">
            <summary>
            Checks if field value length is between min and max values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustHaveLengthBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Validates String length is between min and max values
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsLessOrEqualTo(System.Object)">
            <summary>
            Checks if field value is less than or equal to 'm'
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeLessOrEqualTo(System.Object,System.String)">
            <summary>
            Validates field value is less than or equal to 'm'
            </summary>
            <param name="m"></param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsLessThan(System.Object)">
            <summary>
            Checks if field value is less than 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeLessThan(System.Object,System.String)">
            <summary>
            Validates field value is less than 'm'. IComparable.
            </summary>
            <param name="m"></param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsGreaterOrEqualTo(System.Object)">
            <summary>
            Checks if field value is greater than or equal to 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeGreaterOrEqualTo(System.Object,System.String)">
            <summary>
            Validates field value is greater than or equal to 'm'. IComparable.
            </summary>
            <param name="m"></param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsGreaterThan(System.Object)">
            <summary>
            Checks if field value is greater than 'm'. IComparable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustBeGreaterThan(System.Object,System.String)">
            <summary>
            Validates field value is greater than 'm'. IComparable.
            </summary>
            <param name="m"></param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsCountBetween(System.Int32,System.Int32)">
            <summary>
            Checks if field value collection size is between min and max values inclusively (field must implement ICollection)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustHaveCountBetween(System.Int32,System.Int32,System.String)">
            <summary>
            Validates collection size is between min and max values inclusively (field must implement ICollection)
            </summary>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.IsRegexpr(System.String)">
            <summary>
            Checks if field value qualifies to regular expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Upida.Validation.ConstraintValidator`1.MustRegexpr(System.String,System.String)">
            <summary>
            Validates if field qualifies to regular expression
            </summary>
            <param name="expr">regular expression</param>
            <param name="msg">failure message</param>
            <returns></returns>
        </member>
    </members>
</doc>
